---
title: "Introduction to R and Rstudio"
title-slide-attributes: 
  data-background-color: "#43464B"
  data-notes: "This session concerns R Packages or code libraries"
subtitle: "Session  - Packages"
author: "Zoë Turner"
format:
  revealjs:
    theme: [default, nhsr-quarto.scss]
    logo: https://raw.githubusercontent.com/nhs-r-community/assets/main/logo/nhsr-logo.svg
    code-link: true
    css: nhsr-quarto.scss
    self-contained: true
    preview-links: true
execute:
    echo: true
    eval: false
---

## Packages

::: columns
::: {.column width="50%"}
### R packages are like apps for your phone:

Extend the capabilities of the basic or "base R"\
with extra functions, datasets, code examples & documentation.
:::

::: {.column width="50%"}
<img src="img/session01/app_analogy.PNG" alt="Simple flowchart of packages installation to loading and how that matches the download app to open app on a mobile phone" class="center"/>
:::
:::

::: notes

You can think of R packages as like little 'apps' like you have on your phone. They're little self-contained things that help you to do what you need to do

They will augment what you're doing with either extra functions, extra datasets, or extra documentation. These will save you time and allow you to do things that aren't easy to do yourself. So rather than write code to do something yourself, you might find that someone has already written something that you can use or build on, saving you time and allowing you to do things that you otherwise wouldn't have the time or the ability to do. I will typically use a number of packages for each R project, and you will probably find you do the same. There's no point reinventing the wheel.

:::

## Package locations

### CRAN repository

[Comprehensive R Archive Network](https://cran.r-project.org/web/packages/)

19,291 packages (March 2023), free and structurally peer reviewed

### GitHub

Many useful packages in development or subject to a lot of change are not on CRAN and are available through GitHub including [{NHSRtheme}](https://github.com/nhs-r-community/NHSRtheme). These won't be peer reviewed.

### ROpenSci

ROpenSci offer a peer reviewed ecosystem of R packages through GitHub including UKHSA's [{fingertipsR}](https://github.com/ropensci/fingertipsR)

::: notes

Packages are stored in repositories, which are big archives of packages. Mostly you'll deal with the comprehensive R archive network, or CRAN, which has the most packages. Packages submitted here will have an element of peer review and checks on them. You'll find all sorts of packages, from visualisation ones, through to machine learning or modelling, text mining or NLP, ones that create office documents, geospatial ones, all sorts.

There are alternatives - packages in development can often be installed from GitHub, and there are alternate repositories such as ROpenSci. However, mostly you're going to be using CRAN.

:::

## Packages

::: columns
::: {.column width="40%"}
Quotations in R can be either double or single quotes but cannot be mixed or omitted:

```{r}
# either
install.packages("tidyverse")

# or
install.packages('tidyverse')
```

:::

::: {.column width="60"}
or use the RStudio wizard (only for published CRAN packages)

<img src="img/session-packages/package-wizard.PNG" alt="Screenshot of right panels in RStudio with the Packages tab highlighted" class="center"/>
:::
:::

::: notes

To use a new package, you follow a two step process

First, you need to install the package (only once), using the install.packages function, then each time you want to use it you load it up by using the library function.

To install packages, this is the code you'll use.

(Demo this)

Can everyone try this in the console, or write it an R Script and run the commands. (pause) Everyone ok?

:::

# Loading package

This needed for every new session/script and is often at the top

::: columns
::: {.column width="40%"}
```{r}
library(tidyverse) 
```

Can be loaded from the packages panel and code appears in the Console
:::

::: {.column width="60%"}
<img src="img/session-packages/package-load.PNG" alt="Screenshot of the tick box next to tidyverse in the Packages tab that can be ticked" class="center"/>
:::
:::

::: notes

Then each time you want to use it you load it up by using the library function.

(demo this)

I'll give everyone a minute now to do this as we'll use the tidyverse later. Did everyone manage it? (pause)

:::


## {tidyverse}

::: columns
::: {.column width="40%"}
Curly brackets around a {package} is used in text as many packages have "real names"
:::

::: {.column width="60%"}
<img src="img/session-packages/tidyverse.PNG" alt="The tidyverse name in a black screen with coloured dots like stars" class="center"/>
:::
:::

::: notes

I'm going to spend a little time discussing one suite of packages called the tidyverse.

:::

## What is the {tidyverse}?

The [tidyverse package](https://www.tidyverse.org/) collects (some of) the most popular\
R packages into one.

Also refers to a coding style in R.

::: notes

The tidyverse is a group of packages which work really well together, and make common tasks very much easier, so you'll find you use it almost universally for working in R.

:::

## {tidyverse} debate

Should you use {tidyverse} when many of the packages are redundant?

Clashes occur with the packages which you are notified about, but not with those outside the package

```{r}
── Attaching core tidyverse packages ────────────────────────────────────────────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.0     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.1     ✔ tibble    3.1.8
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ──────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package to force all conflicts to become errors
```
::: notes

When you load in the tidyverse, you should see something like this.

Now, loading all the tidyverse at once might mean you have packages that you don't need, but often it's best for beginners just to used {tidyverse} as it's easy to install and load altogether, so that's what I'd recommend.

:::

## Errors, warnings & notifications

Warnings - not errors, just information on versions (from an older system)

    Warning messages:
    1: package ‘tidyverse’ was built under R version 4.0.4 
    2: package ‘tidyr’ was built under R version 4.0.3 
    3: package ‘readr’ was built under R version 4.0.3 
    4: package ‘purrr’ was built under R version 4.0.3 
    5: package ‘dplyr’ was built under R version 4.0.3 
    6: package ‘stringr’ was built under R version 4.0.3 

Don't rely upon colour changes as all three are orange in the console!

::: notes

Dependent on the version of R you have, you also might get some warning messages like here. Again, these are advisory warnings so don't stop anything running. Don't worry about them if you see them. Has everyone got something similar to the above?

Proper errors are where the code breaks, doesn't run at all and also says Error. 

Warnings often mean the code has run, it's just giving information as something could break.

{tidyverse} messages are very helpful and have been coded to give good information on errors.

Does anyone have any questions? If not, second session before the break is about RStudio projects, which Farai is doing, so I'll stop sharing my screen and pass over to him

:::


## End session